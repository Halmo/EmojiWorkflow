{"version":3,"sources":["faceImages/blank_eyes.png","faceImages sync nonrecursive //.(png|jpe?g|svg)$","faceImages/blank_joy.png","faceImages/lasagna_face.png","faceImages/nice_blank_eyes.png","Renderer.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","getTextureShaderProgram","gl","shaderProgram","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","initShaderProgram","program","attribLocations","vertexPosition","getAttribLocation","textureCoord","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","uSampler","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","src","value","drawScene","programInfo","buffers","scale","translate","rotation","mat4","glMatrix","create","rotateZ","type","FLOAT","bindBuffer","ARRAY_BUFFER","position","vertexAttribPointer","enableVertexAttribArray","ELEMENT_ARRAY_BUFFER","indices","useProgram","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","UNSIGNED_SHORT","drawElements","TRIANGLES","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","require","Canvas","state","document","querySelector","getContext","premultipliedAlpha","this","rafHandle","raf","renderGlScene","bind","renderer","positionBuffer","createBuffer","bufferData","Float32Array","STATIC_DRAW","textureCoordBuffer","tintTextureCoordBuffer","DYNAMIC_DRAW","indexBuffer","Uint16Array","tintTextureCoord","bgTexture","props","backgroundImage","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","oldProps","eyeSrc","updateEyeTexture","updateBackgroundTexture","eyeTexture","programs","clearColor","clearDepth","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","x","eyeXOffset","y","eyeYOffset","scaleX","eyeScaleFactor","scaleY","eyeSrcAspectRatio","scaleXLeft","mirrorLeftEye","scaleXRight","mirrorRightEye","rotationLeft","eyeRotation","rotationRight","Component","images","App","blankEyes","aspectRatio","yOffset","xOffset","scaleFactor","onSelectFile","target","files","length","reader","FileReader","addEventListener","result","setState","readAsDataURL","onSelectBGFile","r","importAll","classname","className","Math","PI","style","onChange","alignSelf","maxHeight","axis","xmin","xmax","checked","i","onPick","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64c57b93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blank_eyes.6585e257.png\";","var map = {\n\t\"./blank_eyes.png\": 11,\n\t\"./blank_joy.png\": 68,\n\t\"./lasagna_face.png\": 69,\n\t\"./nice_blank_eyes.png\": 70\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 67;","module.exports = __webpack_public_path__ + \"static/media/blank_joy.d7309f23.png\";","module.exports = __webpack_public_path__ + \"static/media/lasagna_face.1b36eb6a.png\";","module.exports = __webpack_public_path__ + \"static/media/nice_blank_eyes.3c4c32b9.png\";","import * as glMatrix from 'gl-matrix'\nimport { matcherHint } from 'jest-matcher-utils';\n\n//\n// initBuffers\n//\n// Initialize the buffers we'll need. For this demo, we just\n// have one object -- a simple two-dimensional square.\n//\nexport function initBuffers(gl) {\n\n  // Create a buffer for the square's positions.\n\n  const positionBuffer = gl.createBuffer();\n\n  // Select the positionBuffer as the one to apply buffer\n  // operations to from here out.\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  // Now create an array of positions for the square.\n\n  const positions = [\n     1.0,  1.0,\n    -1.0,  1.0,\n    -1.0, -1.0,\n     1.0, -1.0,\n  ];\n\n  // Now pass the list of positions into WebGL to build the\n  // shape. We do this by creating a Float32Array from the\n  // JavaScript array, then use it to fill the current buffer.\n\n  gl.bufferData(gl.ARRAY_BUFFER,\n                new Float32Array(positions),\n                gl.STATIC_DRAW);\n\n  const textureCoordBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\n\n  const textureCoordinates = [\n    // Front\n    1.0,  0.0,\n    0.0,  0.0,\n    0.0,  1.0,\n    1.0,  1.0,\n  ];\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates),\n                gl.STATIC_DRAW);\n\n  const tintTextureCoordBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, tintTextureCoordBuffer);\n\n  const tintTextureCoordinates = [\n    // Front\n    1.0,  0.0,\n    0.0,  0.0,\n    0.0,  1.0,\n    1.0,  1.0,\n  ];\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tintTextureCoordinates), gl.DYNAMIC_DRAW);\n\n  // Build the element array buffer; this specifies the indices\n  // into the vertex arrays for each face's vertices.\n\n  const indexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n  const indices = [\n    0, 1, 2,    2, 3, 0,\n  ];\n\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\n    new Uint16Array(indices), gl.STATIC_DRAW);\n\n  return {\n    position: positionBuffer,\n    textureCoord: textureCoordBuffer,\n    tintTextureCoord: tintTextureCoordBuffer,\n    indices: indexBuffer,\n  };\n}\n\nexport function updateTextureCoordinates(gl, textureCoordBuffer, coordinates) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coordinates), gl.DYNAMIC_DRAW);\n}\n\nexport function getTextureShaderProgram(gl) {\n  // Vertex shader program\n      \n  const vsSource = `\n  attribute vec4 aVertexPosition;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  varying highp vec2 vTextureCoord;\n\n  void main(void) {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n    vTextureCoord = aTextureCoord;\n  }\n  `;\n\n  // Fragment shader program\n\n  const fsSource = `\n    precision highp float;\n\n    varying highp vec2 vTextureCoord;\n\n    uniform sampler2D uSampler;\n\n    void main(void) {\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\n      gl_FragColor.rgb *= gl_FragColor.a;\n    }\n  `;\n\n  // Initialize a shader program; this is where all the lighting\n  // for the vertices and so forth is established.\n  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\n\n  // Collect all the info needed to use the shader program.\n  // Look up which attribute our shader program is using\n  // for aVertexPosition and look up uniform locations.\n  return {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n      textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord'),\n    },\n    uniformLocations: {\n      projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\n      uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),\n    },\n  };\n}\n\n//\n// Initialize a texture and load an image.\n// When the image finished loading copy it into the texture.\n//\nexport function loadTexture(gl, url) {\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  // Because images have to be download over the internet\n  // they might take a moment until they are ready.\n  // Until then put a single pixel in the texture so we can\n  // use it immediately. When the image has finished downloading\n  // we'll update the texture with the contents of the image.\n  const level = 0;\n  const internalFormat = gl.RGBA;\n  const width = 1;\n  const height = 1;\n  const border = 0;\n  const srcFormat = gl.RGBA;\n  const srcType = gl.UNSIGNED_BYTE;\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n                width, height, border, srcFormat, srcType,\n                pixel);\n\n  const image = new Image();\n  image.onload = function() {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\n                  srcFormat, srcType, image);\n\n    // WebGL1 has different requirements for power of 2 images\n    // vs non power of 2 images so check if the image is a\n    // power of 2 in both dimensions.\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\n       // Yes, it's a power of 2. Generate mips.\n       gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n       // No, it's not a power of 2. Turn off mips and set\n       // wrapping to clamp to edge\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    }\n  };\n  image.src = url;\n\n  return texture;\n}\n\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) == 0;\n}\n\nexport function drawStart(gl) {\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);  // Clear to black, fully opaque\n  gl.clearDepth(1.0);                 // Clear everything\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\n\n  // Clear the canvas before we start drawing on it.\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\nexport function drawScene(gl, programInfo, buffers, texture, scale, translate, rotation) {\n  // Create a perspective matrix, a special matrix that is\n  // used to simulate the distortion of perspective in a camera.\n  // Our field of view is 45 degrees, with a width/height\n  // ratio that matches the display size of the canvas\n  // and we only want to see objects between 0.1 units\n  // and 100 units away from the camera.\n\n  var mat4 = glMatrix.mat4;\n\n  // const fieldOfView = 45 * Math.PI / 180;   // in radians\n  // const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  // const zNear = 0.1;\n  // const zFar = 100.0;\n  const projectionMatrix = mat4.create();\n\n  // note: glmatrix.js always has the first argument\n  // as the destination to receive the result.\n  // mat4.perspective(projectionMatrix,\n  //                  fieldOfView,\n  //                  aspect,\n  //                  zNear,\n  //                  zFar);\n\n  // Set the drawing position to the \"identity\" point, which is\n  // the center of the scene.\n  const modelViewMatrix = mat4.create();\n\n  // Now move the drawing position a bit to where we want to\n  // start drawing the square.\n\n  mat4.translate(modelViewMatrix, modelViewMatrix, translate); \n\n  mat4.scale(modelViewMatrix, modelViewMatrix, scale);\n\n  mat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation);\n\n  // Tell WebGL how to pull out the positions from the position\n  // buffer into the vertexPosition attribute.\n  {\n    const numComponents = 2;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n    gl.vertexAttribPointer(\n        programInfo.attribLocations.vertexPosition,\n        numComponents,\n        type,\n        normalize,\n        stride,\n        offset);\n    gl.enableVertexAttribArray(\n        programInfo.attribLocations.vertexPosition);\n  }\n\n  // Tell WebGL how to pull out the texture coordinates from\n  // the texture coordinate buffer into the textureCoord attribute.\n  {\n    const numComponents = 2;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\n    gl.vertexAttribPointer(\n        programInfo.attribLocations.textureCoord,\n        numComponents,\n        type,\n        normalize,\n        stride,\n        offset);\n    gl.enableVertexAttribArray(\n        programInfo.attribLocations.textureCoord);\n  }\n\n  // Tell WebGL which indices to use to index the vertices\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\n  // Tell WebGL to use our program when drawing\n\n  gl.useProgram(programInfo.program);\n\n  // Set the shader uniforms\n\n  gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);\n  gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);\n\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.uniform1i(programInfo.uniformLocations.uSampler, 0);\n\n  {\n    const offset = 0;\n    const vertexCount = 6;\n    const type = gl.UNSIGNED_SHORT;\n    gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\n  }\n}\n\n//\n// Initialize a shader program, so WebGL knows how to draw our data\n//\nexport function initShaderProgram(gl, vsSource, fsSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n  // Create the shader program\n\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n\n  // If creating the shader program failed, alert\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n    return null;\n  }\n\n  return shaderProgram;\n}\n\n//\n// creates a shader of the given type, uploads the source and\n// compiles it.\n//\nexport function loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  // Send the source to the shader object\n\n  gl.shaderSource(shader, source);\n\n  // Compile the shader program\n\n  gl.compileShader(shader);\n\n  // See if it compiled successfully\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n","import React, { Component } from 'react';\nimport raf from 'raf';\nimport * as renderer from './Renderer'\n\nvar Color = require('color');\n \nexport default class Canvas extends Component {\n\n  state = {\n  }\n \n  componentDidMount() {\n      const canvas = document.querySelector('#glcanvas');\n      const gl = canvas.getContext('webgl', {premultipliedAlpha: false});\n\n        // If we don't have a GL context, give up now\n        if (!gl) {\n          alert('Unable to initialize WebGL. Your browser or machine may not support it.');\n          return;\n        }\n\n        this.rafHandle = raf(this.renderGlScene.bind(this, gl));\n\n        this.programInfo = renderer.getTextureShaderProgram(gl);\n      \n        // Here's where we call the routine that builds all the\n        // objects we'll be drawing.\n        this.buffers = renderer.initBuffers(gl);\n      \n        this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\n      \n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n\n    componentDidUpdate(oldProps) {\n      if (oldProps.eyeSrc != this.props.eyeSrc) {\n        this.updateEyeTexture();\n      }\n\n      if (oldProps.backgroundImage != this.props.backgroundImage) {\n        this.updateBackgroundTexture();\n      }\n    }\n\n    updateBackgroundTexture() {\n      const canvas = document.querySelector('#glcanvas');\n      const gl = canvas.getContext('webgl');\n\n      this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\n    }\n\n    updateEyeTexture() {\n      var eyeSrc = this.props.eyeSrc;\n      if (eyeSrc != null) {\n        const canvas = document.querySelector('#glcanvas');\n        const gl = canvas.getContext('webgl');\n\n        this.eyeTexture = renderer.loadTexture(gl, eyeSrc, gl.LINEAR);\n      } else {\n        this.eyeTexture = null;\n      }\n    }\n \n    renderGlScene(gl, programs) {\n      renderer.drawStart(gl);\n      renderer.drawScene(gl, this.programInfo, this.buffers, this.bgTexture, [1.0, 1.0, 1.0], [0, 0, 0], 0);\n\n      if (this.eyeTexture) {\n        var x = this.props.eyeXOffset;\n        var y = this.props.eyeYOffset;\n\n        var scaleX = this.props.eyeScaleFactor;\n        var scaleY = this.props.eyeScaleFactor;\n        if (this.props.eyeSrcAspectRatio < 1) {\n          scaleX = scaleX * this.props.eyeSrcAspectRatio;\n        } else if (this.props.eyeSrcAspectRatio > 1) {\n          scaleY = scaleY * 1/this.props.eyeSrcAspectRatio;\n        }\n\n        var scaleXLeft = this.props.mirrorLeftEye ? -scaleX : scaleX;\n        var scaleXRight = this.props.mirrorRightEye ? -scaleX : scaleX;\n\n        var rotationLeft = this.props.mirrorLeftEye ? this.props.eyeRotation : -this.props.eyeRotation;\n        var rotationRight = this.props.mirrorRightEye ? -this.props.eyeRotation : this.props.eyeRotation;\n\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.eyeTexture, [scaleXLeft, scaleY, 1.0], [-x, y, 0], rotationLeft);\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.eyeTexture, [scaleXRight, scaleY, 1.0], [x, y, 0], rotationRight);\n      }\n\n      this.rafHandle = raf(this.renderGlScene.bind(this, gl, programs));\n  }\n \n    render() {\n        return (\n          <canvas id=\"glcanvas\" width=\"160\" height=\"160\"/>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Canvas from './Canvas';\nimport Slider from 'react-input-slider';\nimport ImagePicker from 'react-image-picker'\nimport 'react-image-picker/dist/index.css'\n\nimport blankEyes from './faceImages/blank_eyes.png'\n\nvar images = [];\n\nexport default class App extends React.Component {\n  state = {\n    src: null,\n    backgroundImage:blankEyes,\n    aspectRatio:1,\n    yOffset:0,\n    xOffset:0,\n    scaleFactor:100,\n    rotation:0,\n    mirrorRightEye:false,\n    mirrorLeftEye:false,\n  }\n\n  importAll(r) {\n    return r.keys().map(r);\n  }\n  componentWillMount() {\n    images = this.importAll(require.context('./faceImages/', false, /\\.(png|jpe?g|svg)$/));\n  }\n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader()\n      reader.addEventListener(\n        'load',\n        () =>\n        {\n          var image = new Image();\n\n          image.src = reader.result;\n      \n          image.onload = () => {\n              this.setState({\n                src: reader.result,\n                aspectRatio: image.width / image.height,\n              })\n          };\n        },\n        false\n      )\n      reader.readAsDataURL(e.target.files[0])\n    }\n  }\n\n  onSelectBGFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader()\n      reader.addEventListener(\n        'load',\n        () =>\n        {\n          var image = new Image();\n\n          image.src = reader.result;\n      \n          image.onload = () => {\n              this.setState({\n                backgroundImage: reader.result,\n              })\n          };\n        },\n        false\n      )\n      reader.readAsDataURL(e.target.files[0])\n    }\n  }\n\n\n  render() {\n    return (\n      <div classname=\"Top\">\n        \n        <div className=\"App\">\n          <div>Emoji Workflow<br/>\n            <Canvas\n              backgroundImage={this.state.backgroundImage}\n              eyeSrc={this.state.src}\n              eyeSrcAspectRatio={this.state.aspectRatio}\n              eyeXOffset={this.state.xOffset / 100}\n              eyeYOffset={this.state.yOffset / 100}\n              eyeScaleFactor={this.state.scaleFactor / 100}\n              eyeRotation={this.state.rotation * Math.PI / 180}\n              mirrorRightEye={this.state.mirrorRightEye}\n              mirrorLeftEye={this.state.mirrorLeftEye}\n            />\n          </div>\n          <div style={{}}>\n            <input type=\"file\" onChange={this.onSelectFile} style={{alignSelf:'top'}}/>\n            <div>\n              <img src={this.state.src} style={{maxHeight:100}}/>\n            </div>\n          </div>\n          \n          <div className=\"ImageSettings\">\n              X Offset: {this.state.xOffset}%<br/>\n              <Slider axis=\"x\" x={this.state.xOffset} xmin={0} xmax={100} onChange={({x}) => this.setState({xOffset:x})}/><br/>\n              Y Offset: {this.state.yOffset}%<br/>\n              <Slider axis=\"x\" x={this.state.yOffset} xmin={-100} xmax={100} onChange={({x}) => this.setState({yOffset:x})}/><br/>\n              Scale Factor: {this.state.scaleFactor}%<br/>\n              <Slider axis=\"x\" x={this.state.scaleFactor} xmin={0} xmax={100} onChange={({x}) => this.setState({scaleFactor:x})}/><br/>\n              Rotation:  {this.state.rotation}&deg;<br/>\n              <Slider axis=\"x\" x={this.state.rotation} xmin={-45} xmax={45} onChange={({x}) => this.setState({rotation:x})}/><br/>\n              Mirror Right Eye: <input type=\"checkbox\" onChange={(e) => this.setState({mirrorRightEye:e.target.checked})}/><br/>\n              Mirror Left Eye: <input type=\"checkbox\" onChange={(e) => this.setState({mirrorLeftEye:e.target.checked})}/><br/>\n          </div>\n        </div>\n        <div>\n          <ImagePicker\n            images={images.map((image, i) => ({src: image, value: i}))}\n            onPick={ (image) => {\n              this.setState({backgroundImage:image.src});\n            }}/>\n        </div>\n        <div>\n          Or choose a custom image:\n          <input type=\"file\" onChange={this.onSelectBGFile} style={{alignSelf:'top'}}/>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}